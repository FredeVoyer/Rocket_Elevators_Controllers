'//Pseudocode for commercial building elevators (classic) controller (controller algorithm)

'Note: I used "'" and or "//" for comments or removing stuff from the algo'

SET battery_amount to 1
SET column_amount to 4
SET _ElevatorPerColAmount to 3 'per column'
SET floor_amount to 66
SET basement_amount to 6



'// definition of the class Battery
DEFINE Battery USING id, status, _ColumnAmount, _ElevatorPerColAmount, _MinFloor, _MaxFloor
    ID: id,
    Status: status, 'online, offline'
    ColumnAmount : _ColumnAmount,
    ElevatorPerColAmount: _ElevatorPerColAmount,
    '//floor_amount: _floor_amount,
    MinFloor: _MinFloor,
    MaxFloor: _MaxFloor,
    ColumnList: SET to empty List,
    ColumnMinFloorList: SET to empty List,
    ColumnMaxFloorList: SET to empty List,
    
    SEQUENCE createColumnList USING _ColumnAmount, _ElevatorPerColAmount, _MinFloor, _MaxFloor
        SET iterator to 1
        FOR _ColumnAmount
            INIT newColumn TO INSTANTIATE WITH iterator, online, _ElevatorPerColAmount, _MinFloor, _MaxFloor
            ADD newColumn TO ColumnList
            INCREMENT iterator
        ENDFOR
    ENDSEQUENCE

ENDDEFINE

'// definition of the class Column
DEFINE Column USING id, status, _ElevatorPerColAmount, _floor_amount, _MinFloor, _MaxFloor
    ID: id,
    Status: status,
    ElevatorPerColAmount: _ElevatorPerColAmount,
    floor_amount: _floor_amount
    MinFloor: _MinFloor, 'excluding mainfloor'
    MaxFloor: _MaxFloor, 'excluding mainfloor'

    outsideElevatorCurrentFloorDisplayList: SET to empty List,
    insideElevatorCurrentFloorDisplayList: SET to empty List,
    ElevatorList: SET to empty List,
    UpButtonList: SET to empty List,
    DownButtonList: SET to empty List,

    UpButtonFloorList: SET to empty List,
    DownButtonFloorList: SET to empty List,
   
    FloorUpRequestList: SET to empty List,
    FloorDownRequestList: SET to empty List

     
    SEQUENCE columnAddFloorRequestList USING FloorUpRequestList, FloorDownRequestList, buttonDirection AND floorRequested
        if buttonDirection = up THEN
            '// verify if floor requested already in the FloorUpRequestList before adding to the list
            SET addToList to true;
            FOR EACH FloorUpRequest IN FloorUpRequestList
                if floorRequested = FloorUpRequest THEN
                    SET addToList to false;
                    EXIT FOR '// BREAK
                endif

            ENDFOR
            if addToList=true or floorRequested is not in FloorUpRequestList THEN
                ADD floorRequested TO FloorUpRequestList
                SORT ascending order FloorUpRequestList
           endif
        endif
        else if buttonDirection = down THEN
            '// verify if floor requested already in the FloorDownRequestList before adding to the list
            SET addToList to true;
            FOR EACH FloorDownRequest IN FloorDownRequestList
                if floorRequested = FloorDownRequest THEN
                    SET addToList to false;
                    EXIT FOR '// BREAK
                endif

            ENDFOR
            if addToList=true or floorRequested is not in FloorDownRequestList THEN
                ADD floorRequested TO FloorDownRequestList
                SORT descending order FloorDownRequestList
            endif
        endif
    ENDSEQUENCE

    SEQUENCE columnRemoveFloorRequestList USING  FloorUpRequestList, FloorDownRequestList, buttonDirection AND floorRequested
         if buttonDirection is up THEN
            FOR EACH FloorUpRequest IN FloorUpRequestList
                if floorRequested is equal to FloorUpRequest THEN
                    REMOVE FloorUpRequest FROM FloorUpRequestList
                endif
            ENDFOR
        endif
        else if buttonDirection is down THEN
            FOR EACH FloorDownRequest IN FloorDownRequestList
                if floorRequested is equal to FloorDownRequest THEN
                    REMOVE FloorDownRequest FROM FloorDownRequestList
                endif
            ENDFOR
        endif
    ENDSEQUENCE

    SEQUENCE columnFindElevator USING ElevatorList, ElevatorDestination, ElevatorFloor, ElevatorDirection, ElevatorFloorUpRequestList, ElevatorFloorDownRequestList, FloorUpRequestList, FloorDownRequestList, buttonDirection AND FloorDownRequest
        '// case FloorUpRequestList
        SET ElevatorUpSelected to null
        SET minFloorUpRequested to first item of FloorUpRequestList
        SET maxFloorUpRequested to last item of FloorUpRequestList
           '' // select first elevator moving, refine with closest one or one that can do all the list
        FOR EACH Elevator IN ElevatorList
            COMPUTE distance between the Elevator and maxFloorUpRequested

            if ElevatorDirection is up AND ElevatorFloor <= maxFloorUpRequested AND Elevator has lowest distance from maxFloorUpRequested THEN
                SET ElevatorUpSelected TO Elevator
                FOR ElevatorUpSelected IN ElevatorList
                    '//SET ElevatorFloorUpRequestList TO FloorUpRequestList
                    '//SET ElevatorFloorDownRequestList TO FloorDownRequestList

                    FOR EACH FloorUpRequest IN FloorUpRequestList
                        if FloorUpRequest is higher or equal to ElevatorFloor
                            CALL elevatorAddFloorRequestList with ElevatorDestination, ElevatorFloor, ElevatorDirection, ElevatorFloorUpRequestList, ElevatorFloorDownRequestList, buttonDirection AND floorRequested
                            CALL columnRemoveFloorRequestList with FloorUpRequestList, FloorDownRequestList, buttonDirection AND FloorUpRequest
                        endif
                    ENDFOR
                ENDFOR

                EXIT FOR '// BREAK to avoid picking more than one elevator at the same distance from floor requested
            endif
        ENDFOR
            '// select lastly elevator not moving (idle and with no destination) and the closest to clear (empty) FloorUpRequestList
        if ElevatorUpSelected = null THEN
            FOR EACH Elevator IN ElevatorList
                COMPUTE distance between the Elevator and maxFloorUpRequested

                if ElevatorDirection is idle AND ElevatorDestination is null AND Elevator has lowest distance from maxFloorUpRequested THEN
                    SET buttonDirection TO up
                    SET ElevatorUpSelected TO Elevator
                    FOR ElevatorUpSelected IN ElevatorList
                        '//SET ElevatorFloorUpRequestList TO FloorUpRequestList
                        '//SET ElevatorFloorDownRequestList TO FloorDownRequestList
                        FOR EACH FloorUpRequest IN FloorUpRequestList
                                CALL elevatorAddFloorRequestList with ElevatorDestination, ElevatorFloor, ElevatorDirection, ElevatorFloorUpRequestList, ElevatorFloorDownRequestList, buttonDirection AND floorRequested
                                CALL columnRemoveFloorRequestList with FloorUpRequestList, FloorDownRequestList, buttonDirection AND FloorUpRequest
                        ENDFOR
                    ENDFOR
                EXIT FOR '// BREAK to avoid picking more than one elevator at the same distance from floor requested
                endif
            ENDFOR
        endif

        '// case FloorDownRequestList
        SET ElevatorDownSelected to null
        SET minFloorDownRequested to first item of FloorDownRequestList
        SET maxFloorDownRequested to last item of FloorDownRequestList
            '// select first elevator moving, refine with closest one  or one that can do all the list
        FOR EACH Elevator IN ElevatorList
            COMPUTE distance between the Elevator and minFloorDownRequested

            if ElevatorDirection is down AND ElevatorFloor >= minFloorDownRequested AND Elevator has lowest distance from minFloorDownRequested THEN
                SET ElevatorDownSelected TO Elevator
                FOR ElevatorDownSelected IN ElevatorList
                    '//SET ElevatorFloorUpRequestList TO FloorUpRequestList
                    '//SET ElevatorFloorDownRequestList TO FloorDownRequestList
                    FOR EACH FloorDownRequest IN FloorDownRequestList
                        if FloorDownRequest is lower or equal to ElevatorFloor
                            CALL elevatorAddFloorRequestList with ElevatorDestination, ElevatorFloor, ElevatorDirection, ElevatorFloorUpRequestList, ElevatorFloorDownRequestList, buttonDirection AND floorRequested
                            CALL columnRemoveFloorRequestList with FloorUpRequestList, FloorDownRequestList, buttonDirection AND FloorDownRequest
                        endif
                    ENDFOR
                ENDFOR
                EXIT FOR '// BREAK to avoid picking more than one elevator at the same distance from floor requested
            endif
        ENDFOR
            '// select lastly elevator not moving (idle and with no destination) to clear (empty) FloorDownRequestList
        if ElevatorDownSelected = null THEN
            FOR EACH Elevator IN ElevatorList
                'case not moving'
                COMPUTE distance between the Elevator and minFloorDownRequested
             
                if ElevatorDirection is idle AND ElevatorDestination is null AND Elevator has lowest distance from minFloorDownRequested THEN
                    SET buttonDirection TO down
                    SET ElevatorDownSelected TO Elevator
                    FOR ElevatorDownSelected IN ElevatorList
                        '//SET ElevatorFloorUpRequestList TO FloorUpRequestList
                        '//SET ElevatorFloorDownRequestList TO FloorDownRequestList
                        FOR EACH FloorDownRequest IN FloorDownRequestList
                            if FloorDownRequest is lower or equal to ElevatorFloor
                                CALL elevatorAddFloorRequestList with ElevatorDestination, ElevatorFloor, ElevatorDirection, ElevatorFloorUpRequestList, ElevatorFloorDownRequestList, buttonDirection AND floorRequested
                                CALL columnRemoveFloorRequestList with FloorUpRequestList, FloorDownRequestList, buttonDirection AND FloorDownRequest
                            endif
                        ENDFOR
                    ENDFOR
                    EXIT FOR '// BREAK to avoid picking more than one elevator at the same distance from floor requested
                endif
            ENDFOR
        endif

    ENDSEQUENCE
    'remove done below initiate'
    SEQUENCE createElevatorList USING elevator_amount
        SET elevId to 1
        FOR elevator= 0 TO elevator_amount - 1
            SET ElevatorList[elevator] TO "Elevator elevId"
            INCREMENT elevId
        ENDFOR
    ENDSEQUENCE
    'remove done below initiate'
    SEQUENCE createUpButtonList USING floor_amount
        SET buttonId to 1
        FOR button= 0 TO floor_amount - 2
            SET UpButtonList[button] TO "UpButton buttonId"
            INCREMENT buttonId
        ENDFOR
    ENDSEQUENCE
    'remove done below initiate'
    SEQUENCE createDownButtonList USING floor_amount
        SET buttonId to 1
        FOR button= 0 TO floor_amount - 2
            SET DownButtonList[button] TO "DownButton buttonId"
            INCREMENT buttonId
        ENDFOR
    ENDSEQUENCE
    'remove done below initiate'
    SEQUENCE createUpButtonFloorList USING floor_amount
        SET floorId to 1
        FOR floor= 0 TO floor_amount - 2
            SET UpButtonFloorList[floor] TO floorId
            INCREMENT floorId
        ENDFOR
    ENDSEQUENCE
    'remove done below initiate'
    SEQUENCE createDownButtonFloorList USING floor_amount
        SET floorId to 2
        FOR floor= 0 TO floor_amount - 2
            SET DownButtonFloorList[floor] TO floorId
            INCREMENT floorId
        ENDFOR
    ENDSEQUENCE

ENDDEFINE

'// definition of the class Elevator
DEFINE Elevator USING origin, floor, destination, doorOpen, doorClosed, direction, id AND status
    ID: id,
    Status: status, '// online, offline
    Direction : direction, '// null (idle not moving if destination is null else moving), up, down (moving for both)
    Door: _Door 'open closed'
    DoorOpen: doorOpen, '// bool true false
    DoorClosed: doorClosed, '// bool true false
    Floor: floor, '// floor domain (1,...,10)
    Destination: destination, '// floor domain (1,...,10) and null if Direction to null (idle, not moving; else moving)
    Origin: origin, '// floor domain (1,...,10)
    MaxWeight: 2500, '// pounds'
    ElevatorCurrentFloorDisplay: _ElevatorCurrentFloorDisplay 'display floor object below add method displayElevatorCurrentFloor'
    FloorButtonList: SET to empty List,
    FloorButtonFloorList: SET to empty List,
    ButtonFloorRequestedList: SET to empty List,
    FloorRequestList: SET to empty List,
    FloorUpRequestList: SET to empty List,
    FloorDownRequestList: SET to empty List

     
    SEQUENCE elevatorAddFloorRequestList USING ElevatorDestination, ElevatorFloor, ElevatorDirection, ElevatorFloorUpRequestList, ElevatorFloorDownRequestList, buttonDirection AND floorRequested

        '// case NOT MOVING:ElevatorFloorUpRequestList, ElevatorFloorDownRequestList are empty before the call
        if ElevatorDirection is idle AND ElevatorDestination is null THEN
            if buttonDirection is up THEN
                '// verify if floor requested already in the ElevatorFloorUpRequestList before adding to the list
                SET addToList TO true;
                FOR EACH ElevatorFloorUpRequest IN ElevatorFloorUpRequestList
                    if floorRequested is equal to ElevatorFloorUpRequest THEN
                        SET addToList TO false;
                        EXIT FOR '// BREAK
                    endif

                ENDFOR
                if addToList is true or floorRequested is not in ElevatorFloorUpRequestList THEN
                    ADD floorRequested TO ElevatorFloorUpRequestList
                    SORT ascending order ElevatorFloorUpRequestList
                endif
            else if buttonDirection is down THEN
                '// verify if floor requested already in the ElevatorFloorDownRequestList before adding to the list
                SET addToList TOtrue;
                FOR EACH ElevatorFloorDownRequest IN ElevatorFloorDownRequestList
                    if floorRequested is equal to ElevatorFloorDownRequest THEN
                        SET addToList TO false;
                        EXIT FOR '// BREAK
                    endif

                ENDFOR
                if addToList is equal to true or floorRequested is not in ElevatorFloorDownRequestList THEN
                    ADD floorRequested TO ElevatorFloorDownRequestList
                    SORT descending order ElevatorFloorDownRequestList
                endif

            endif
        'case moving '
        else
            if floorRequested is higher than ElevatorFloor THEN
                '// verify if floor requested already in the ElevatorFloorUpRequestList before adding to the list
                SET addToList TO true;
                FOR EACH ElevatorFloorUpRequest IN ElevatorFloorUpRequestList
                    if floorRequested is equal to ElevatorFloorUpRequest THEN
                        SET addToList TO false;
                        EXIT FOR '// BREAK
                    endif

                ENDFOR
                if addToList is equal to true or floorRequested is not in ElevatorFloorUpRequestList THEN
                    ADD floorRequested TO ElevatorFloorUpRequestList
                    SORT ascending order ElevatorFloorUpRequestList
                endif
            endif
            else if floorRequested is lower than ElevatorFloor THEN
                '// verify if floor requested already in the ElevatorFloorDownRequestList before adding to the list
                SET addToList TO true;
                FOR EACH ElevatorFloorDownRequest IN ElevatorFloorDownRequestList
                    if floorRequested is equal to ElevatorFloorDownRequest THEN
                        SET addToList=false;
                        EXIT FOR '// BREAK
                    endif

                ENDFOR
                if addToList is equal to true or floorRequested is not in ElevatorFloorDownRequestList THEN
                    ADD floorRequested TO ElevatorFloorDownRequestList
                    SORT descending order ElevatorFloorDownRequestList
                endif
            endif
            '// not sure necessary case to treat (do something) or treated below
            else if floorRequested is equal to ElevatorFloor THEN
            endif
        endif
  
    ENDSEQUENCE
    
    SEQUENCE elevatorRemoveFloorRequestList USING  ElevatorFloorUpRequestList, ElevatorFloorDownRequestList, buttonDirection AND floorRequested
        if buttonDirection is up THEN
            FOR EACH ElevatorFloorUpRequest IN ElevatorFloorUpRequestList
                if floorRequested is equal to ElevatorFloorUpRequest THEN
                    REMOVE ElevatorFloorUpRequest FROM ElevatorFloorUpRequestList
                endif
            ENDFOR
        endif
        else if buttonDirection is down THEN
            FOR EACH ElevatorFloorDownRequest IN ElevatorFloorDownRequestList
                if floorRequested is equal to ElevatorFloorDownRequest THEN
                    REMOVE ElevatorFloorDownRequest FROM ElevatorFloorDownRequestList
                endif
            ENDFOR
        endif
    ENDSEQUENCE
    'verify done lower'
    SEQUENCE updateElevatorDirection USING ElevatorFloor ElevatorDestination
        IF ElevatorFloor is higher than ElevatorDestination THEN
            SET ElevatorDirection TO down
        else IF ElevatorFloor is lower than ElevatorDestination THEN
            SET ElevatorDirection TO up 
        endif 
    ENDSEQUENCE

    SEQUENCE updateElevatorFloor USING ElevatorFloor ElevatorDestination
        IF ElevatorFloor is higher than ElevatorDestination THEN
            DECREMENT ElevatorFloor
        else IF ElevatorFloor is lower than ElevatorDestination THEN
            INCREMENT ElevatorFloor
        endif 
    ENDSEQUENCE

    SEQUENCE updateElevatorDestination USING ElevatorDirection, ElevatorFloorDownRequestList AND ElevatorFloorUpRequestList
        IF ElevatorDirection is up AND ElevatorFloorUpRequestList is not empty THEN
            SET ElevatorDestination TO first item of ElevatorFloorUpRequestList
        else IF ElevatorDirection is down AND ElevatorFloorDownRequestList is not empty THEN
            SET ElevatorDestination TO first item of ElevatorFloorDownRequestList
        endif 
    ENDSEQUENCE

    SEQUENCE updateDoor USING 
    ENDSEQUENCE

    SEQUENCE updateOrigin USING 
    ENDSEQUENCE


ENDDEFINE

'// definition of the class Button (related to floor and column, light on if pressed, light off if command resolved or default)
DEFINE Button USING floor, direction, id AND status
    ID: id,
    Status: status, '// pressed, notPressed
    Floor: floor, 
    Light: off,
    Direction: direction '// up, down

ENDDEFINE
DEFINE UpButton USING floor, direction, id AND status
    ID: id,
    Status: status, '// pressed, notPressed
    Floor: floor, 
    Light: off,
    Direction: up

ENDDEFINE
DEFINE DownButton USING floor, direction, id AND status
    ID: id,
    Status: status, '// pressed, notPressed
    Floor: floor, 
    Light: off,
    Direction: down

ENDDEFINE
DEFINE FloorButton USING floorRequested, id AND status
    ID: id,
    Status: status, '// pressed, notPressed
    FloorRequested: floorRequested, 
    Light: off,
    Direction: direction '// up, down

ENDDEFINE
DEFINE OpenDoorButton USING id AND status
    ID: id,
    Status: status, '// pressed, notPressed
ENDDEFINE
DEFINE CloseDoorButton USING id AND status
    ID: id,
    Status: status, '//' pressed, notPressed
ENDDEFINE
DEFINE Door 
    ID: id,
    Status: closed, '//' open, closed

    SEQUENCE openDoor
        OPEN the door
        SET Status TO open
    ENDSEQUENCE

    SEQUENCE closeDoor
        CLOSE the door
        SET Status TO closed
    ENDSEQUENCE

ENDDEFINE

'Floor display class ElevatorCurrentFloorDisplay'
DEFINE outsideElevatorCurrentFloorDisplay USING ElevatorFloor, floor', id 
    'ID: id,
    Status: online, '// online offline
    Floor: floor, 
    CurrentElevatorFloor: ElevatorFloor

    SEQUENCE displayOutsideElevatorCurrentFloor USING ElevatorFloor
        Display ElevatorFloor
    ENDSEQUENCE
ENDDEFINE

DEFINE insideElevatorCurrentFloorDisplay USING ElevatorFloor', id 
    'ID: id,
    Status: online, '// online offline
    CurrentElevatorFloor: ElevatorFloor

    SEQUENCE displayInsideElevatorCurrentFloor USING ElevatorFloor
        Display ElevatorFloor
    ENDSEQUENCE
ENDDEFINE

'//For each column there is a board displaying the floors served so the user can use the right one'

'//Column A: B6 to B1 + RC 
'//Column B: 2 to 20 + RC 
'//Column C: 21 to 40 + RC
'//Column D: 41 to 60 + RC

'//SEQUENCE initialize *******************************************************************************************************************
    SET battery_amount to 1
    SET column_amount to 4
    SET elevator_amount to 3 'per column'
    SET floor_amount to 66
    SET basement_amount to 6

    '//FOR i=battery_amount
    SET battery1 TO INSTANTIATE Battery WITH 1, online, _ColumnAmount, _ElevatorPerColAmount, _floor_amount, _MinFloor, _MaxFloor
    '//ENDFOR

    CALL createColumnList WITH _ColumnAmount, _ElevatorPerColAmount, _MinFloor, _MaxFloor

    'set amount and values for each columns'
    if Columnid is 1 THEN 
        SET Column_MinFloor TO -6
        ADD Column_MinFloor TO ColumnMinFloorList
        SET Column_MaxFloor TO -1
        ADD Column_MaxFloor TO ColumnMaxFloorList
    else if Columnid is 2 THEN 
        SET Column_MinFloor TO 2
        ADD Column_MinFloor TO ColumnMinFloorList
        SET Column_MaxFloor TO 20
        ADD Column_MaxFloor TO ColumnMaxFloorList
    else if Columnid is 3 THEN 
        SET Column_MinFloor TO 21
        ADD Column_MinFloor TO ColumnMinFloorList
        SET Column_MaxFloor TO 40
        ADD Column_MaxFloor TO ColumnMaxFloorList
    else if Columnid is 4 THEN 
        SET Column_MinFloor TO 41
        ADD Column_MinFloor TO ColumnMinFloorList
        SET Column_MaxFloor TO 60
        ADD Column_MaxFloor TO ColumnMaxFloorList
    endif

    FOR EACH Column IN ColumnList
        FOR i= 1 TO elevator_amount
            SET elevatori TO INSTANTIATE Elevator WITH 1, 1, null, false, true, idle, i AND online
            ADD elevatori TO ElevatorList
        ENDFOR

        FOR i= Column_MinFloor TO Column_MaxFloor - 1
            SET UpButtoni TO INSTANTIATE UpButton WITH i, up, i AND notPressed
            ADD UpButtoni TO UpButtonList
            SET UpButtonFloori TO i
            ADD UpButtonFloori TO UpButtonFloorList
        ENDFOR
        'add main floor UpButton except for column1'
        if Column is not Column1 THEN
            SET UpButton1 TO INSTANTIATE UpButton WITH 1, up, 1 AND notPressed
            ADD UpButton1 TO UpButtonList
            'useful to sort list?'
            SORT ascending order UpButtonList
            'add main floor DownButton floor'
            SET UpButtonFloor1 TO 1
            ADD UpButtonFloor1 TO UpButtonFloorList
            'useful to sort list?'
            SORT ascending order UpButtonFloorList
        endif

        FOR i= Column_MinFloor TO Column_MaxFloor
            SET DownButtoni TO INSTANTIATE DownButton WITH i, down, i AND notPressed
            ADD DownButtoni TO DownButtonList
            SET DownButtonFloori TO i
            ADD DownButtonFloori TO DownButtonFloorList
            INCREMENT i
        ENDFOR
        'add main floor DownButton only for column1'
        if Column is Column1 THEN
            SET DownButton1 TO INSTANTIATE DownButton WITH 1, down, 1 AND notPressed
            ADD DownButton1 TO DownButtonList
            'useful to sort list?'
            SORT ascending order DownButtonList
            'add main floor DownButton floor '
            SET DownButtonFloor1 TO 1
            ADD DownButtonFloor1 TO DownButtonFloorList
            'useful to sort list?'
            SORT ascending order DownButtonFloorList
        endif

        FOR EACH Elevator IN ElevatorList
            FOR i= Column_MinFloor TO Column_MaxFloor
                SET NewOutsideElevatorCurrentFloorDisplay TO INSTANTIATE outsideElevatorCurrentFloorDisplay WITH ElevatorFloor, i
                ADD NewOutsideElevatorCurrentFloorDisplay TO outsideElevatorCurrentFloorDisplayList
                INCREMENT i
            ENDFOR
            'add main floor outsideElevatorCurrentFloorDisplay'
            SET outsideElevatorCurrentFloorDisplay1 TO INSTANTIATE outsideElevatorCurrentFloorDisplay WITH ElevatorFloor, 1
            ADD outsideElevatorCurrentFloorDisplay1 TO outsideElevatorCurrentFloorDisplayList
            'useful to sort list?'
            SORT ascending order outsideElevatorCurrentFloorDisplayList

            SET ElevatorDoor TO INSTANTIATE Door 

        ENDFOR

        FOR EACH Elevator IN ElevatorList
            FOR i= Column_MinFloor TO Column_MaxFloor
                SET floorButtoni TO INSTANTIATE FloorButton WITH i, i AND notPressed
                ADD floorButtoni TO FloorButtonList
                SET floorButtonFloori TO i
                ADD floorButtonFloori TO FloorButtonFloorList
                INCREMENT i
            ENDFOR
            'add main floor button'
            SET floorButton1 TO INSTANTIATE FloorButton WITH 1, 1 AND notPressed
            ADD floorButton1 TO FloorButtonList
            'useful to sort list?'
            SORT ascending order FloorButtonList

            'add main floor button floor'
            SET floorButtonFloor1 TO 1
            ADD floorButtonFloor1 TO FloorButtonFloorList
            'useful to sort list?'
            SORT ascending order FloorButtonFloorList

            SET ElevatorOpenDoorButton TO INSTANTIATE OpenDoorButton WITH open AND notPressed
            SET ElevatorCloseDoorButton TO INSTANTIATE CloseDoorButton WITH close AND notPressed

            SET NewInsideElevatorCurrentFloorDisplay TO INSTANTIATE insideElevatorCurrentFloorDisplay WITH ElevatorFloor
            ADD NewInsideElevatorCurrentFloorDisplay TO insideElevatorCurrentFloorDisplayList
            'useful to sort list?'
            '//SORT ascending order insideElevatorCurrentFloorDisplayList

        ENDFOR
    ENDFOR
'//ENDSEQUENCE
'//CALL initialize *******************************************************************************************************************
'66 floors (including 6 basements) served by four columns, each consisting of 3 elevators.
'FOR EACH Battery IN BatteryList

    FOR EACH Column IN ColumnList

        WHILE columnStatus IS online

            FOR EACH outsideElevatorCurrentFloorDisplay IN outsideElevatorCurrentFloorDisplayList
                CALL displayOutsideElevatorCurrentFloor with ElevatorFloor
                WHEN ElevatorFloor INCREMENT OR DECREMENT
                    CALL displayOutsideElevatorCurrentFloor with ElevatorFloor
            ENDFOR

            FOR EACH UpButton IN UpButtonList
                WHEN user press UpButton
                    SET buttonStatus to pressed
                    SET buttonDirection to up
                    SET floorRequested to UpButtonFloor
                    CALL columnAddFloorRequestList with FloorUpRequestList, FloorDownRequestList, buttonDirection AND floorRequested
                    turn UpButtonLight on
            ENDFOR
            FOR EACH DownButton IN DownButtonList
                WHEN user press DownButton
                    SET buttonStatus to pressed
                    SET buttonDirection to down
                    SET floorRequested to DownButtonFloor
                    CALL columnAddFloorRequestList with FloorUpRequestList, FloorDownRequestList, buttonDirection AND floorRequested
                    turn DownButtonLight on
            ENDFOR


            WHILE  elevatorStatusOnlineAmount is greater than 0

                WHEN FloorUpRequestList is NOT empty OR FloorDownRequestList is NOT empty
                    CALL columnFindElevator with ElevatorList, ElevatorDestination, ElevatorFloor, ElevatorDirection, ElevatorFloorUpRequestList, ElevatorFloorDownRequestList, FloorUpRequestList, FloorDownRequestList, buttonDirection AND FloorDownRequest

                SET elevatorStatusOnlineAmount TO 0

                FOR EACH Elevator IN ElevatorList

                    if elevatorStatus is Online THEN
                        INCREMENT elevatorStatusOnlineAmount
                    endif
                    WHEN Elevator is outOfOrder or not safe THEN
                        SET elevatorStatus TO Offline
                        'remove Elevator from ElevatorList'

                    WHEN Elevator is operational and safe
                        SET elevatorStatus TO Online
                        'add Elevator from ElevatorList'

                    WHEN ElevatorDirection is idle
                        if ElevatorDestination is not null THEN
                            move elevator to ElevatorDestination without stops and without updating ElevatorFloorUpRequestList and ElevatorFloorDownRequestList
                            WHEN ElevatorFloor is equal to ElevatorDestination
                                SET ElevatorDirection TO buttonDirection
                                'continue using ElevatorFloorRequestList linked to buttonDirection for ElevatorDestination
                        endif
                        'else         

                    WHEN ElevatorDirection is not idle
                        'switch ElevatorDirection, buttonDirection and ElevatorFloorRequestList used'
                        'update ElevatorDestination'
                        if ElevatorDestination is null AND ElevatorFloorUpRequestList is empty AND ElevatorFloorDownRequestList is empty THEN
                            SET ElevatorDirection TO idle
                            SET buttonDirection TO idle
                    else if ElevatorDestination is null AND ElevatorFloorUpRequestList is empty AND ElevatorFloorDownRequestList is not empty THEN
                            SET ElevatorDirection TO down
                            SET buttonDirection TO down
                            SET ElevatorDestination TO first item of ElevatorFloorDownRequestList
                    else if ElevatorDestination is null AND ElevatorFloorUpRequestList is not empty AND ElevatorFloorDownRequestList is empty THEN
                            SET ElevatorDirection TO up
                            SET buttonDirection TO up
                            SET ElevatorDestination TO first item of ElevatorFloorUpRequestList
                        endif
                
                    FOR EACH insideElevatorCurrentFloorDisplay IN insideElevatorCurrentFloorDisplayList
                        CALL displayInsideElevatorCurrentFloor with ElevatorFloor
                        WHEN ElevatorFloor INCREMENT OR DECREMENT
                            CALL displayInsideElevatorCurrentFloor with ElevatorFloor
                    ENDFOR


                    FOR EACH FloorButton IN FloorButtonList
                        WHEN user press FloorButton
                            turn FloorButtonLight on
                            set status of FloorButton to Pressed
                            if ElevatorFloor is lower than FloorButtonFloor THEN
                                SET buttonDirection to up
                            else if ElevatorFloor is higher than FloorButtonFloor THEN
                                SET buttonDirection to down
                            else
                                SET buttonDirection to idle '//null
                                open doors
                                turn FloorButtonLight off
                                close doors after a delay of 7 seconds
                            endif
                            SET floorRequested to FloorButtonFloor
                            CALL elevatorAddFloorRequestList with ElevatorDestination, ElevatorFloor, ElevatorDirection, ElevatorFloorUpRequestList, ElevatorFloorDownRequestList, buttonDirection AND floorRequested
                    ENDFOR


                    WHEN ElevatorFloor is equal to ElevatorDestination
                        CALL elevatorRemoveFloorRequestList with ElevatorFloorUpRequestList, ElevatorFloorDownRequestList, buttonDirection AND ElevatorDestination
                        if ElevatorDirection is up THEN 
                            SET ElevatorDestination TO first item of ElevatorFloorUpRequestList
                            turn the light off of UpButton of this floor
                            set status of UpButton of this floor to notPressed
                        else if ElevatorDirection is down THEN 
                            SET ElevatorDestination TO first item of ElevatorFloorDownRequestList
                            turn the light off of DownButton of this floor
                            set status of DownButton of this floor to notPressed
                        endif
                        turn the light off of FloorButton of this floor
                        set status of FloorButton of this floor to notPressed
                        stop elevator
                        open doors
                        close doors after a delay of 7 seconds
                        allow users to use OpenDoorButton AND CloseDoorButton before or when door is closing only
                        WHEN door is closed
                            move elevator to the next floor if list is not empty
                            if ElevatorDirection is up THEN 
                                INCREMENT ElevatorFloor
                            else if ElevatorDirection is down THEN 
                                DECREMENT ElevatorFloor
                            endif

                    WHEN ElevatorFloor is lower than ElevatorDestination and ElevatorDirection is up
                        move elevator to the next floor
                        INCREMENT ElevatorFloor

                    WHEN ElevatorFloor is higher than ElevatorDestination and ElevatorDirection is down
                        move elevator to the next floor               
                        DECREMENT ElevatorFloor



                ENDFOR

            ENDWHILE

            'verify or update loop condition
            if elevatorStatusOnlineAmount is equal to 0
                SET columnStatus TO offline
            endif
        
        ENDWHILE
    ENDFOR
'ENDFOR

'-------------------------------------------------------Testing Section------------------------------------------------------------'
Floors deserved:
Column A: B6 to B1 + RC 
Column B: 2 to 20 + RC 
Column C: 21 to 40 + RC
Column D: 41 to 60 + RC

Scenario 1:
    Elevator B1 at 20th floor going to the 5th floor
        ElevatorDirection is down 
        ElevatorFloor is 20 
        ElevatorDestination is 5 
    Elevator B2 at 3rd floor going to the 15th floor
        ElevatorDirection is up 
        ElevatorFloor is 3 
        ElevatorDestination is 15 
    Elevator B3 at 13th floor going to RC
        ElevatorDirection is down 
        ElevatorFloor is 13 
        ElevatorDestination is 1 
    Elevator B4 at 15th floor going to the 2nd floor
        ElevatorDirection is down 
        ElevatorFloor is 15 
        ElevatorDestination is 2 
    Elevator B5 at 6th floor going to RC
        ElevatorDirection is down 
        ElevatorFloor is 3 
        ElevatorDestination is 6 

    Someone at RC wants to go to the 20th floor.
        CALL columnAddFloorRequestList with FloorUpRequestList, FloorDownRequestList, up AND 1

    Elevator B5 is expected to be sent.

- Scénario 2:
    Elevator C1 at RC going to the 21st floor
        ElevatorDirection is up 
        ElevatorFloor is 1 
        ElevatorDestination is 21

    Elevator C2 at 23rd floor going to the 28th floor
        ElevatorDirection is up 
        ElevatorFloor is 23 
        ElevatorDestination is 28 

    Elevator C3 at 33rd floor going to RC
        ElevatorDirection is down 
        ElevatorFloor is 33 
        ElevatorDestination is 1 

    Elevator C4 at 40th floor going to the 24th floor
        ElevatorDirection is down 
        ElevatorFloor is 40 
        ElevatorDestination is 24 

    Elevator C5 at 39th floor going to RC
        ElevatorDirection is down 
        ElevatorFloor is 39 
        ElevatorDestination is 1 

    Someone at RC wants to go to the 36th floor.
        CALL columnAddFloorRequestList with FloorUpRequestList, FloorDownRequestList, up AND 1

    Elevator C1 is expected to be sent.

- Scénario 3:
    Elevator D1 at 58th going to RC
        ElevatorDirection is down 
        ElevatorFloor is 58 
        ElevatorDestination is 1 

    Elevator D2 at 50th floor going to the 60th floor
        ElevatorDirection is up 
        ElevatorFloor is 50 
        ElevatorDestination is 60 

    Elevator D3 at 46th floor going to the 58th floor
        ElevatorDirection is up 
        ElevatorFloor is 46 
        ElevatorDestination is 58 

    Elevator D4 at RC going to the 54th floor
        ElevatorDirection is up 
        ElevatorFloor is 1 
        ElevatorDestination is 54 

   Elevator D5 at 60th floor going to RC
        ElevatorDirection is down 
        ElevatorFloor is 60 
        ElevatorDestination is 1 

    Someone at 54e floor wants to go to RC.
        CALL columnAddFloorRequestList with FloorUpRequestList, FloorDownRequestList, down AND 54

    Elevator D1 is expected to be sent.

- Scénario 4:
    Elevator A1 “Idle” at SS4
        ElevatorDirection is idle 
        ElevatorFloor is -4

    Elevator A2 “Idle” at RC
        ElevatorDirection is idle 
        ElevatorFloor is 1 

    Elevator A3 at SS3 going to SS5
        ElevatorDirection is down 
        ElevatorFloor is -3 
        ElevatorDestination is -5

    Elevator A4 at SS6 going to RC
        ElevatorDirection is up 
        ElevatorFloor is -6 
        ElevatorDestination is 1

    Elevator A5 at SS1 going to SS6
        ElevatorDirection is down 
        ElevatorFloor is -1 
        ElevatorDestination is -6 

    Someone at SS3 wants to go to RC.
        CALL columnAddFloorRequestList with FloorUpRequestList, FloorDownRequestList, up AND -3

    Elevator A4 is expected to be sent.

'-------------------------------------------------------Testing Section------------------------------------------------------------'